<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SGPA and CGPA Calculator</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #28313B , #485461);
            color: #ffffff;
            font-weight: 400;
            padding: 20px;
            box-sizing: border-box;
        }

        .container {
            width: 100%;
            max-width: 400px;
            padding: 10px;
            background: linear-gradient(360deg, #000000, #434343);
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
            font-size: 14px;
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 15px;
        }

        input[type="text"], input[type="number"] {
            width: calc(100% - 20px);
            padding: 8px;
            box-sizing: border-box;
            background-color: #f0f0f0;
            color: #000000;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-weight: 400;
            font-size: 14px;
        }

        button {
            width: 100%;
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s ease;
            font-size: 14px;
        }

        button:hover {
            background-color: #45a049;
        }

        .grade-management {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            padding: 10px;
            background: linear-gradient(360deg, #272525, #6b6a6a);
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            color: #fff;
            font-weight: 400;
            margin-top: 15px;
        }

        .total-grades {
            padding: 10px;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            color: #fff;
            font-weight: 400;
            width: 100%;
            text-align: center;
            font-size: 14px;
        }

        .grade {
            background-color: #f8d7da;
            padding: 3px 5px;
            border-radius: 3px;
            margin: 3px;
            font-size: 12px;
        }

        .sgpa-cgpa-calculator {
            padding: 10px;
            background-color: #f0f0f0;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-top: 15px;
            width: 100%;
            max-width: 300px;
            text-align: center;
            border: 1px solid #ccc;
            margin: 0 auto;
        }

        .sgpa-cgpa-calculator h3 {
            color: #ffffff;
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 14px;
        }

        #calculateBtn {
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s ease;
            width: 50%;
            font-size: 14px;
        }

        #calculateBtn:hover {
            background-color: #2c53a8;
        }

        #calculationMethod {
            width: calc(100% - 20px);
            padding: 8px;
            box-sizing: border-box;
            background-color: #f0f0f0;
            color: #000000;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-weight: 400;
            font-size: 14px;
            margin-bottom: 15px;
        }

        h4 {
            font-size: 1.3rem;
            color: #ffffff;
            margin: 8px 0;
        }

        .org-id {
            font-size: 0.9rem;
            text-align: center;
            margin-top: 0;
            color: #ffffff;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Grade Management</h1>
        <label for="userId">User ID:</label>
        <input type="text" id="userId" placeholder="Enter User ID">
        <div>
            <label for="calculationMethod">Calculation Method:</label>
            <select id="calculationMethod">
                <option value="percentage">Percentage-Based</option>
                <option value="gradePoint">Grade Point-Based</option>
            </select>
        </div>
        <button id="fetchBtn">Fetch Data</button>
        <div id="result"></div>
        <div id="userData"></div>
        <div class="grade-management">
            <div id="sgpa-cgpa-calculator">
                <h3>SGPA and CGPA </h3>
                <div id="sgpa-results"></div>
                <div id="cgpa-results"></div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const userIdInput = document.getElementById('userId');
            const calculationMethodSelect = document.getElementById('calculationMethod');
            const resultDiv = document.getElementById('result');
            const userDataElement = document.getElementById('userData');
            const sgpaResultsDiv = document.getElementById('sgpa-results');
            const cgpaResultsDiv = document.getElementById('cgpa-results');

            //const apiToken = //api token

            async function fetchOrgUnitIds() {
                const userId = userIdInput.value.trim();
                if (!userId) {
                    alert('Please enter a valid User ID.');
                    return null;
                }

                resultDiv.innerHTML = '';
                userDataElement.innerHTML = '';
                sgpaResultsDiv.innerHTML = '';
                cgpaResultsDiv.innerHTML = '';

                const apiUrl = `https://acadlms.d2l-partners.brightspace.com/d2l/api/lp/1.43/enrollments/users/${userId}/orgunits/`;

                try {
                    const response = await fetch(apiUrl, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${apiToken}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                    const orgUnitIds = data.Items.map(item => item.OrgUnit.Id);

                    // Fetch all grades and course names in parallel
                    const fetchPromises = orgUnitIds.map(orgId => {
                        return Promise.all([
                            fetchGrades(orgId, userId, apiToken),
                            fetchCourseName(orgId, apiToken)
                        ]).then(([grades, courseName]) => ({ orgId, grades, courseName }));
                    });

                    const allGradesAndNames = await Promise.all(fetchPromises);

                    if (allGradesAndNames.length === 0) {
                        userDataElement.innerHTML = '<p>The user does not have any valid grades assigned.</p>';
                    } else {
                        displayUserData(allGradesAndNames);
                        const calculationMethod = calculationMethodSelect.value;
                        const { sgpa, cgpa } = calculateSGPACGPA(allGradesAndNames, calculationMethod);
                        displaySGPA(sgpa);
                        displayCGPA(cgpa);
                    }

                    return allGradesAndNames;

                } catch (error) {
                    console.error('Error fetching org unit IDs:', error);
                    resultDiv.innerHTML = `<p>Error fetching org unit IDs. Please try again.</p>`;
                    return null;
                }
            }

            async function fetchGrades(orgId, userId, apiToken) {
                const gradeUrl = `https://acadlms.d2l-partners.brightspace.com/d2l/api/le/1.43/${orgId}/grades/final/values/${userId}`;

                try {
                    const response = await fetch(gradeUrl, {
                        headers: {
                            'Authorization': `Bearer ${apiToken}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    const gradeData = await response.json();
                    return gradeData;

                } catch (error) {
                    console.error(`Error fetching grades for orgId ${orgId}:`, error);
                    return null;
                }
            }

            async function fetchCourseName(orgId, apiToken) {
                const courseUrl = `https://acadlms.d2l-partners.brightspace.com/d2l/api/lp/1.43/orgstructure/${orgId}`;

                try {
                    const response = await fetch(courseUrl, {
                        headers: {
                            'Authorization': `Bearer ${apiToken}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    const courseData = await response.json();
                    return courseData.Name || 'N/A';

                } catch (error) {
                    console.error(`Error fetching course name for orgId ${orgId}:`, error);
                    return 'N/A';
                }
            }

            function displayUserData(allGradesAndNames) {
                let htmlContent = `<h4>User's Grades:</h4>`;
            
                for (let i = 1; i < allGradesAndNames.length; i++) {
                    const item = allGradesAndNames[i];
                    const orgId = item.orgId;
                    const courseName = item.courseName || 'N/A';
                    const grades = item.grades;
            
                    htmlContent += `<h4>Course: ${courseName}<div class="org-id">Org Unit ID: ${orgId}</div></h4>`;
                    if (grades && grades.DisplayedGrade !== undefined && grades.PointsNumerator !== undefined) {
                        const displayedGrade = grades.DisplayedGrade || 'No Grades Assigned yet';
                        htmlContent += `<p>Grade: ${displayedGrade}</p>`;
                    } else {
                        htmlContent += `<p>No grades available for this course.</p>`;
                    }
                }
            
                userDataElement.innerHTML = htmlContent;
            }
            
            function percentageToGradePoint(percentage) {
                if (percentage >= 90) {
                    return 4.0;
                } else if (percentage >= 80) {
                    return 3.0;
                } else if (percentage >= 70) {
                    return 2.0;
                } else if (percentage >= 60) {
                    return 1.0;
                } else {
                    return 0.0;
                }
            }

            function calculateSGPACGPA(allGradesAndNames, method) {
                let totalSGPA = 0;
                let totalCredits = 0;
                let totalCGPA = 0;
                let totalCourses = 0;

                allGradesAndNames.forEach(item => {
                    const grades = item.grades;
                    if (grades && grades.DisplayedGrade !== undefined) {
                        const percentage = parseFloat(grades.DisplayedGrade);
                        const gradePoint = method === 'percentage' ? percentage / 25 : percentageToGradePoint(percentage);
                        totalSGPA += gradePoint;
                        totalCredits += 1; // Assuming each course is worth 1 credit
                        totalCGPA += gradePoint;
                        totalCourses++;
                    }
                });

                const sgpa = totalSGPA / totalCredits || 0;
                const cgpa = totalCGPA / totalCourses || 0;

                console.log(`SGPA: ${sgpa}, CGPA: ${cgpa}`);

                return { sgpa, cgpa };
            }

            function displaySGPA(sgpa) {
                sgpaResultsDiv.innerHTML = `
                    <h4>Calculated SGPA:</h4>
                    <p>SGPA: ${sgpa.toFixed(2)}</p>
                `;
            }

            function displayCGPA(cgpa) {
                cgpaResultsDiv.innerHTML = `
                    <h4>Calculated CGPA:</h4>
                    <p>CGPA: ${cgpa.toFixed(2)}</p>
                `;
            }

            const fetchBtn = document.getElementById('fetchBtn');
            if (fetchBtn) {
                fetchBtn.addEventListener('click', async () => {
                    const allGradesAndNames = await fetchOrgUnitIds();
                    if (allGradesAndNames) {
                        const calculationMethod = calculationMethodSelect.value;
                        const { sgpa, cgpa } = calculateSGPACGPA(allGradesAndNames, calculationMethod);
                        displaySGPA(sgpa);
                        displayCGPA(cgpa);
                    }
                });
            }
        });
    </script>
</body>
</html>
